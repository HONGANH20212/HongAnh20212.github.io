[
{
	"uri": "/vi/",
	"title": "Full Stack dành cho nhà phát triển Front-End: Xây dựng phần giới thiệu ứng dụng AWS Amplify và React đầu tiên của bạn",
	"tags": [],
	"description": "",
	"content": "Trong khóa học này, bạn sẽ học cách xây dựng ứng dụng fullstack với AWS Amplify Studio. Chúng tôi sẽ xây dựng một ứng dụng ghi chú có xác thực, ủy quyền và dữ liệu. Chúng tôi cũng sẽ sử dụng Figma của Amplify Studio để tạo mã nhằm chuyển thẳng từ thiết kế sang các thành phần React.\nNếu bạn là nhà phát triển giao diện người dùng muốn xây dựng ứng dụng fullstack, thì bạn đang ở đúng nơi!\nĐiều kiện tiên quyết Kiến thức về React, bao gồm trạng thái, trình xử lý sự kiện và đạo cụ. Cách sử dụng giao diện dòng lệnh trên máy tính của bạn. Bạn không cần phải là một chuyên gia mặc dù! Mặc dù khóa học này không bắt buộc hoàn toàn, nhưng bạn có thể muốn tìm hiểu về Figma trước khi xây dựng ứng dụng của riêng mình với AWS Amplify Studio. Những gì bạn sẽ xây dựng Chúng tôi sẽ xây dựng một ứng dụng ghi chú có các tính năng sau: Tất cả các ghi chú được liệt kê trên trang chủ Khả năng tạo, cập nhật và xóa ghi chú Tài khoản người dùng có khả năng đăng nhập, tạo tài khoản và đăng xuất Người dùng chỉ có thể xem và sửa đổi ghi chú của riêng họ "
},
{
	"uri": "/vi/1-create-a-data-model/",
	"title": "Tạo mô hình dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong bài học này, bạn sẽ tạo ứng dụng AWS Amplify Studio khởi động và tạo mô hình dữ liệu.\nHướng dẫn Điều đầu tiên chúng ta cần làm cho ứng dụng ghi chú của mình là tạo các mô hình dữ liệu. Chúng tôi sẽ muốn lưu trữ các ghi chú của mình trong cơ sở dữ liệu để người dùng có thể truy cập chúng trên các thiết bị khác nhau.\nNếu bạn chưa có tài khoản AWS, hãy tiếp tục và tạo một tài khoản . Bạn cũng có thể muốn đọc về giá AWS Amplify và cách đặt cảnh báo thanh toán .\nTruy cập Bảng điều khiển AWS Amplify. Nhấp vào Bắt đầu trong Amplify Studio. Nhập App name: ghi chú . Chọn Xác nhận triển khai. Khi ứng dụng triển khai chọn Khởi chạy studio.\nChọn Dữ liệu và Thiết Lập trên điều hướng bên trái Các mô hình dữ liệu cho phép chúng ta tổ chức và chuẩn hóa dữ liệu - trong JavaScript sẽ rất khó làm việc với một mảng các đối tượng trong đó mỗi đối tượng có các khóa khác nhau. Thay vào đó, chúng tôi muốn chuẩn hóa dữ liệu của mình để mỗi phiên bản có các thuộc tính giống nhau. Chúng tôi cũng muốn các kiểu dữ liệu được chuẩn hóa. Ví dụ: nếu bạn định tạo mô hình dữ liệu cho các mặt hàng trong một cửa hàng trực tuyến, bạn sẽ có tên mặt hàng và mô tả mà bạn muốn là chuỗi. Bạn cũng sẽ có giá, số float và hình ảnh, đó sẽ là một URL. Chuẩn hóa dữ liệu của bạn theo cách này sẽ giúp bạn tương tác dễ dàng hơn nhiều.\nTrong Studio, hãy tạo mô hình dữ liệu Ghi chú được đặt tên và thêm hai trường, tiêu đề và văn bản. Giữ nguyên các kiểu dữ liệu Strings. Khi bạn đã hoàn thành việc này, hãy nhấp vào Lưu và triển khai - giản đồ dữ liệu của bạn sẽ được triển khai tới AWS! Lưu trữ dữ liệu AWS Amplify Khi tạo mô hình dữ liệu bằng AWS Amplify Studio, bạn đang sử dụng DataStore. DataStore lưu trữ dữ liệu của bạn cả trực tuyến và ngoại tuyến mà không cần thực hiện thêm bất kỳ thao tác nào. Trong trình duyệt, nó lưu trữ dữ liệu trong IndexedDB tương tự như localStorage. Nó cũng sẽ lưu dữ liệu của bạn vào đám mây bằng cơ sở dữ liệu Amazon DynamoDB.\n"
},
{
	"uri": "/vi/2-use-the-awsamplify/",
	"title": "Sử dụng AWS Amplify Data Manager để tạo dữ liệu gốc",
	"tags": [],
	"description": "",
	"content": "Trong bài học này, Chúng tôi sẽ tự động tạo dữ liệu gốc trong trình quản lý dữ liệu AWS Amplify..\nHướng dẫn Chuyển đến tab Nội dung trong Amplify Studio. Trong trang Nội Dung chọn Hành Động chọn Tự động tạo dữ liệu. Tại đây, bạn sẽ có thể sửa đổi dữ liệu ứng dụng của mình. Tôi sẽ tạo 100 hàng dữ liệu và thêm một số ràng buộc. Tôi muốn tiêu đề của mình dài từ 1-3 từ. Tôi muốn mỗi trường văn bản của tôi dài từ 1-5 câu. Sau đó tôi sẽ nhấp vào Tạo dữ liệu. Bây giờ bạn sẽ thấy 100 hàng dữ liệu trong trình quản lý dữ liệu Khuếch đại. Bạn có thể truy cập và chỉnh sửa bất kỳ hàng dữ liệu nào, tạo ghi chú mới hoặc xóa chúng bằng trình quản lý dữ liệu. "
},
{
	"uri": "/vi/3-import-figma-designs/",
	"title": "Nhập các thiết kế Figma vào Amplify Studio",
	"tags": [],
	"description": "",
	"content": "Trong bài học này, chúng ta sẽ sử dụng AWS Amplify Studio để chuyển đổi các thiết kế từ công cụ thiết kế phổ biến Figma sang các thành phần React.\nHướng dẫn Chuyển đến Thư viện giao diện người dùng trong Studio. Chọn Đồng bộ hóa với Figma. Đối với khóa học này, tôi đã tạo trước một tệp Figma được phối lại từ Bộ công cụ giao diện người dùng Amplify ban đầu để bạn sử dụng có các thành phần cần thiết cho ứng dụng ghi chú. Nhấp vào Nhân bản trên Figma để sử dụng nó. Bạn sẽ được nhắc tạo tài khoản Figma nếu chưa có \u0026ndash; dự án này thuộc bậc miễn phí của họ.\nChọn Thành phần của tôi bạn sẽ thấy các thành phần giao diện người dùng của mình trong Amplify Studio Sao chép liên kết đến tệp Figma của bạn rồi quay lại Amplify Studio. Dán liên kết của bạn vào đầu vào, sau đó nhấp vào Tiếp tục. Amplify Studio cho phép bạn lấy các thành phần này và xuất chúng sang mã React mà con người có thể đọc được - chúng ta sẽ thực hiện điều này trong một vài bài học!\n"
},
{
	"uri": "/vi/4-connect-data/",
	"title": "Các mô hình dữ liệu kết nối ứng dụng AWS Amplify và React đầu tiên của bạn với các thành phần giao diện người dùng",
	"tags": [],
	"description": "",
	"content": "Trong bài học này, chúng ta sẽ liên kết dữ liệu do AWS Amplify tạo với Thành phần giao diện người dùng.\nHướng dẫn Chuyển đến Thư viện giao diện người dùng trong Studio. Chọn NoteUI sau đó nhập vào Cấu hình Nhấp vào tiêu đề trên thẻ hiện có nội dung T-Shirt. Ở phía bên phải của trang, Chọn Đặt nhãn văn bản. Chúng tôi sẽ muốn đặt tiêu đề này thành tiêu đề của ghi chú. Đặt giá đỡ nhãn: note.title. Bạn sẽ thấy văn bản áo phông thay đổi thành một trong các tiêu đề của một trong các ghi chú được tạo. Nếu bạn nhấp vào Xáo trộn dữ liệu xem trước, bạn sẽ xoay vòng qua các ghi chú khác nhau! Làm tương tự cho văn bản ghi chú - chọn đoạn bên dưới tiêu đề. Đặt label thành note.title. Nhấp vào biểu tượng thùng rác. Đặt onClick giá đỡ thành Delete dưới dữ liệu. Sau đó chọn Note kiểu máy và đặt ID thành note.id Tạo biểu mẫu Quay lại Thư viện giao diện người dùng. Bấm vào CreateNote biểu mẫu, sau đó chọn Cấu hình. Nhấp vào Lưu và thêm Prop: `onClick. Hành động: Create new. Mô hình: Note. Sau đó, chọn title đầu vào để điền vào trường mô hình tiêu đề và tương tự cho văn bản. Tên TextField đến từ Figma - bạn có thể đổi tên các thành phần bên trong nó! Cập nhật biểu mẫu Quay lại Thư viện giao diện người dùng. Bấm vào UpdateNote , sau đó chọn Cấu hình. Nhấp vào Lưu và thêm như hình dưới đây. Bây giờ chúng tôi đã liên kết dữ liệu mà chúng tôi đã tạo trong Amplify Studio với các thành phần giao diện người dùng mà chúng tôi đã tạo trong Figma. "
},
{
	"uri": "/vi/5-create-a-collection-view/",
	"title": "Tạo chế độ xem bộ sưu tập",
	"tags": [],
	"description": "",
	"content": "Trong bài này chung ta sẽ tạo một bộ sưu tập để hiển thị tất cả các ghi chú trong ứng dụng của chúng ta.\nHướng dẫn Chuyển đến Thư viện giao diện người dùng trong Studio. Chọn NoteUI sau đó nhập vào Cấu hình Sau đó chọn Tạo bộ sưu tập. Sau đó thay đổi kiểu bộ sưu tập thành lưới và đặt số cột thành 3 và đặt kích thước trang là 9 cuối cùng sẽ thêm 10px lề vào mỗi bên ghi chú. Bạn cũng có thể đặt điều kiện sắp xếp hoặc lọc cho bộ sưu tập của mình ở phía bên tay phải.\n"
},
{
	"uri": "/vi/6-setup-a-local-aws/",
	"title": "Thiết lập ứng dụng AWS Amplify cục bộ",
	"tags": [],
	"description": "",
	"content": "Đã đến lúc phát triển ứng dụng cục bộ bằng mã! Chúng ta sẽ tạo một ứng dụng React và thiết lập AWS Amplify cho dự án.\nHướng dẫn Tạo một ứng dụng phản ứng Đầu tiên, tạo một ứng dụng React bằng giao diện dòng lệnh của bạn. Chúng tôi sẽ sử dụng Tạo ứng dụng React để tạo ứng dụng React soạn sẵn.\nChạy npx create-react-app notes. Sau đó thay đổi vào thư mục đã tạo, cd notes.\nChạy Amplify Kéo Chúng ta sẽ cài đặt AWS Amplify CLI: npm install -g @aws-amplify/cli. Quay lại Amplify Studio và nhấp vào Hướng dẫn thiết lập cục bộ. Tại đây, bạn sẽ nhận được một amplify pulllệnh cho ứng dụng của mình - ID ứng dụng sẽ dành riêng cho ứng dụng của bạn. Sao chép lệnh này bằng cách nhấp vào nó, sau đó chạy lệnh trong CLI của bạn. Màn hình sẽ hiện thỉ hỏi liệu bạn có muốn đăng nhập vào Amplify CLI trong trình duyệt của mình hay không, chọn Có và sau đó bạn sẽ được hỏi các câu hỏi về ứng dụng của mình trong CLI. Nhấn enter để trả lời từng câu hỏi mặc định. Mở mã ứng dụng trong trình soạn thảo văn bản của bạn. Bạn sẽ nhận thấy rằng một vài thư mục đã tạo trong Amplify Studio. Khuếch đại cấu hình Cài đặt các thư viện Amplify và các thành phần React. npm i aws-amplify @aws-amplify/ui-react\nSau khi cài xong mở /src/index.js tập tin lên và thêm phần sau vào phía trên mã gốc React.\n// src/index.js\rimport { Amplify } from \u0026#39;aws-amplify\u0026#39;\rimport config from \u0026#39;./aws-exports\u0026#39;\rAmplify.configure(config) Thiết lập giao diện người dùng khuếch đại Chúng tôi có một số bước thiết lập cần tuân theo để các thành phần hiển thị như mong đợi.\nNhập thành phần và tệp Amplify CSS.\n// src/index.js\rimport { AmplifyProvider } from \u0026#39;@aws-amplify/ui-react\u0026#39;\rimport \u0026#39;@aws-amplify/ui-react/styles.css\u0026#39; Sau đó, đặt thành phần AmplifyProvider làm thành phần cấp cao nhất cho ứng dụng của bạn theo root.renderphương thức đã có:\n// src/index.js\rroot.render(\r+ \u0026lt;AmplifyProvider\u0026gt;\r\u0026lt;App /\u0026gt;\r+ \u0026lt;/AmplifyProvider\u0026gt;\r) Cuối cùng, thêm Inter tệp phông chữ vào **src/index.**css:\n/* src/index.css */\r@import url(\u0026#39;https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900\u0026amp;display=swap\u0026#39;); Chúng tôi đã thiết lập một ứng dụng React được liên kết với phụ trợ AWS Amplify và định cấu hình các thành phần giao diện người dùng của Amplify.\n"
},
{
	"uri": "/vi/7-using-aws-amplify/",
	"title": "Cách sử dụng các thành phần AWS Amplify Studio cục bộ",
	"tags": [],
	"description": "",
	"content": "Hãy hiển thị các thành phần React do Amplify Studio tạo trong ứng dụng của chúng ta.\nHướng dẫn Chạy máy chủ phát triển ứng dụng Create React thông qua CLI: npm run start. Giữ cho ứng dụng này chạy trong nền để bạn có thể xem các thay đổi của ứng dụng trong trình duyệt. Đi tới /src/App.js và xóa phần trả lại thay thế bản soạn sẵn bằng Đoạn phản ứng: function App() {\rreturn (\r\u0026lt;\u0026gt;\u0026lt;/\u0026gt;\r)\r} Bạn cũng có thể xóa các mục nhập hiện có.\nThêm NavBar thành phần vào ứng dụng. import { NavBar } from \u0026#39;./ui-components\u0026#39; Sau đó, tạo một phiên bản thành phần trong return function App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar /\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} 5. Khi bạn xem NavBar trong trình duyệt, bạn sẽ nhận thấy rằng nó không trải dài trên toàn bộ trang hãy thêm chỗ dựa width=100% vào thành phần:\n\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt; Bây giờ, hãy kết xuất bộ sưu tập ghi chú bên dưới tiêu đề: import { NavBar, NoteUICollection} from \u0026#39;./ui-components\u0026#39;\rfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt;\r\u0026lt;NoteUICollection /\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} Bạn sẽ nhận thấy rằng NavBar thực sự gần với các ghi chú, hãy thêm một lề dưới vào. \u0026lt;NavBar width=\u0026#34;100%\u0026#34; marginBottom=\u0026#39;20px\u0026#39; /\u0026gt; Thêm vào cuối index.css tệp của mình. Điều này sẽ hữu ích để làm cho bố cục của chúng ta trông đẹp hơn nữa! /* Add to the end of /src/index.css */\r.modal {\rposition: absolute;\rbackground-color: white;\rmargin-left: auto;\rmargin-right: auto;\rwidth: fit-content;\rleft: 0;\rright: 0;\rtop: 100px;\rborder: .5px solid grey;\r}\r.container {\rmargin: 0 auto;\rmax-width: 900px;\r} 9. Bọc NoteUICollectiondiv bằng bộ chứa lớp để chúng được hiển thị ở giữa trang:\nfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt;\r\u0026lt;div className=\u0026#39;container\u0026#39;\u0026gt;\r\u0026lt;NoteUICollection /\u0026gt; \u0026lt;/div\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} 10. Bạn có thể kiểm tra CreateNote biểu mẫu (khi nó không bị ẩn) và nó sẽ thêm một ghi chú mới vào giao diện người dùng của bạn!\nimport { CreateNote, NavBar, NoteUICollection, UpdateNote } from \u0026#39;./ui-components\u0026#39;\rfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt;\r\u0026lt;div className=\u0026#39;container\u0026#39;\u0026gt;\r\u0026lt;NoteUICollection /\u0026gt; \u0026lt;/div\u0026gt;\r\u0026lt;div className=\u0026#39;modal\u0026#39; style={{display: \u0026#39;none\u0026#39;}}\u0026gt;\r\u0026lt;CreateNote /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div className=\u0026#39;modal\u0026#39; style={{display: \u0026#39;none\u0026#39;}}\u0026gt;\r\u0026lt;UpdateNote /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} Bây giờ chúng ta đã tạo giao diện người dùng cơ bản cho ứng dụng của mình.\n"
},
{
	"uri": "/vi/8-modify-aws-amplify/",
	"title": "Sửa đổi các thành phần do AWS Amplify Studio tạo trong mã",
	"tags": [],
	"description": "",
	"content": "AWS Amplify Studio có nhiều chức năng tạo mã giúp tăng tốc thời gian phát triển; tuy nhiên, nó được xây dựng cho các nhà phát triển nên việc có thể ghi đè tất cả mã được tạo là rất quan trọng. Chúng tôi sẽ sử dụng các phần ghi đè để mở rộng chức năng của các thành phần.\nHướng dẫn Đầu tiên, chúng ta sẽ tạo các trường trạng thái để biết mỗi phương thức có được hiển thị hay không. Chúng tôi cũng sẽ tạo một trường trạng thái để lưu trữ ghi chú nào sẽ được cập nhật. import { useState } from \u0026#39;react\u0026#39;\rfunction App () {\rconst [showCreateModal, setShowCreateModal] = useState(false)\rconst [showUpdateModal, setShowUpdateModal] = useState(false)\rconst [updateNote, setUpdateNote] = useState()\r... Mở /src/ui-components/NavBar.jstập tin lên. Bạn sẽ nhận thấy một Buttonthành phần con có getOverridePropsbên trong nó. Đối số thứ hai getOverridePropslà khóa Figma, trong trường hợp này Button31632483là .\nBạn có thể chuyển chỗ dựa overridescho các phiên bản thành phần của mình, phiên bản này sẽ chứa một đối tượng. Key sẽ là key của subcomponent, value sẽ là thuộc tính mà chúng ta muốn override. Chúng tôi sẽ thêm một onClicknút chuyển đổi showCreateModalthành true.\n\u0026lt;NavBar\rmarginBottom=\u0026#39;20px\u0026#39; width=\u0026#39;100%\u0026#39;\roverrides={{\rButton31502513: { onClick: () =\u0026gt; setShowCreateModal(true) }\r}}\r/\u0026gt; Bây giờ, chúng tôi sẽ hiển thị CreateNotephương thức một cách có điều kiện để chỉ hiển thị khi showCreateModallà true. Chúng tôi cũng sẽ ghi đè Xbiểu tượng để đóng phương thức. Đối với khả năng truy cập, tôi cũng sẽ đặt nó thành một nút. \u0026lt;div className=\u0026#39;modal\u0026#39; style={{ display: showCreateModal === false \u0026amp;\u0026amp; \u0026#39;none\u0026#39; }}\u0026gt;\r\u0026lt;CreateNote overrides={{\rMyIcon: {\ras: \u0026#39;button\u0026#39;,\ronClick: () =\u0026gt; setShowCreateModal(false)\r}\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt; Nhấp vào nút chỉnh sửa trên ghi chú sẽ hiển thị phương thức cập nhật và cũng đặt phiên bản ghi chú mà chúng tôi muốn cập nhập/ \u0026lt;NoteUICollection overrideItems={({ item, idx }) =\u0026gt; {\rreturn {\roverrides: {\rVector31472464: {\ras: \u0026#39;button\u0026#39;,\ronClick: () =\u0026gt; {\rsetShowUpdateModal(true)\rsetUpdateNote(item)\r}\r}\r}\r}\r}}\r/\u0026gt; Thêm một ghi đè để UpdateNoteẩn phương thức cập nhật khi nó đóng và chúng tôi cũng sẽ chuyển phiên bản của ghi chú mà chúng tôi muốn cập nhật. \u0026lt;div className=\u0026#39;modal\u0026#39; style={{ display: showUpdateModal === false \u0026amp;\u0026amp; \u0026#39;none\u0026#39; }}\u0026gt;\r\u0026lt;UpdateNote\rnote={updateNote} overrides={{\rMyIcon: {\ras: \u0026#39;button\u0026#39;,\ronClick: () =\u0026gt; setShowUpdateModal(false)\r}\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt; Bây giờ giao diện người dùng đầy đủ của chúng tôi đang hoạt động như mong đợi.\nBạn có thể sử dụng các phần ghi đè để tùy chỉnh các thành phần giao diện người dùng do AWS Amplify Studio tạo trong mã của riêng bạn.\n"
},
{
	"uri": "/vi/9-add-authentication/",
	"title": "Thêm xác thực vào ứng dụng của bạn",
	"tags": [],
	"description": "",
	"content": "Chúng tôi sẽ thêm xác thực vào ứng dụng của mình để người dùng có thể được tạo, đăng nhập và đăng xuất.\nChúng tôi sẽ thêm cả ủy quyền và xác thực vào ứng dụng này - hãy nhanh chóng xác định cả hai:\nỦy quyền - Cho phép người dùng có các hành động khác nhau mà họ có thể thực hiện, ví dụ: chỉ quản trị viên mới có thể cập nhật các bài đăng trên blog hoặc chỉ người tạo dữ liệu mới có thể xem được.\nXác thực - Đảm bảo ai đó đúng như họ nói, chẳng hạn như thông qua việc yêu cầu họ nhập mật khẩu.\nHướng dẫn Nhấp vào Xác thực trong Thiết lập. Bạn có thể định cấu hình các cơ chế đăng nhập, thuộc tính, bảo vệ bằng mật khẩu khác nhau, v.v. bằng cách sử dụng biểu mẫu được cung cấp. Chọn cấu hình mặc định, sau đó nhấp vào Triển khai. Sau khi công việc triển khai của bạn chạy xong, hãy chạy amplify pulltrong CLI của bạn để đồng bộ hóa các thay đổi với ứng dụng cục bộ của bạn.\nTrong App.jsthành phần, chúng tôi sẽ sử dụng WithAuthenticatorchức năng để yêu cầu người dùng đăng nhập để xem trang. Nó cũng sẽ triển khai quy trình tạo người dùng.\nĐầu tiên, nhập thành phần: import { withAuthenticator } from \u0026#39;@aws-amplify/ui-react\u0026#39; Sau đó, trên dòng xuất của bạn, hãy bọc thành phần Ứng dụng trong hàm: export default withAuthenticator(App) Nếu bạn quay lại ứng dụng của mình, bạn sẽ cần phải đăng nhập để xem trang của mình. 3. Hãy triển khai nút đăng xuất! Hàm withAuthenticatorchuyển một signOuthàm (và thông tin của người dùng) đến thành phần mà nó bao bọc dưới dạng chỗ dựa. Hãy phá hủy nó:\nfunction App ({ signOut }) {\nTrong NavBarthành phần chạy chức năng khi nhấp vào nút Đăng xuất. \u0026lt;NavBar\rmarginBottom=\u0026#39;20px\u0026#39; width=\u0026#39;100%\u0026#39;\roverrides={{\rButton31502513: { onClick: () =\u0026gt; setShowCreateModal(true) },\rButton31502517: {\ronClick: async () =\u0026gt; {\rsignOut()\r}\r}\r}}\r/\u0026gt; Bây giờ chúng tôi có một luồng xác thực đầy đủ cho ứng dụng của mình.\n"
},
{
	"uri": "/vi/10-add-owner-based/",
	"title": "Thêm quy tắc ủy quyền dựa trên chủ sở hữu",
	"tags": [],
	"description": "",
	"content": "Trong ứng dụng ghi chú, người dùng chỉ có thể xem và sửa đổi ghi chú của chính họ. Chúng tôi sẽ thêm các quy tắc ủy quyền vào mô hình dữ liệu của mình để dữ liệu được bảo vệ và chỉ chủ sở hữu của dữ liệu mới có thể truy cập được.\nHướng dẫn Trong AWS Amplify Studio, chuyển đến datatab bên dưới Thiết lập. Sau đó nhấp vào mô hình Ghi chú. Bật Bật ủy quyền của chủ sở hữu. Chọn tất cả các hoạt động. Xóa quy tắc đã có. Sau đó nhấp Lưu và triển khai. Khi các bản cập nhật dữ liệu của bạn được triển khai, hãy chạy amplify pulltrong CLI của bạn để đồng bộ hóa các thay đổi của bạn cục bộ. Nhập thư viện DataStore: import { DataStore } from \u0026#39;aws-amplify\u0026#39; Trong NavBarthành phần, hãy thêm dòng mã sau để xóa dữ liệu cục bộ trước khi đăng xuất. \u0026lt;NavBar\rmarginBottom=\u0026#39;20px\u0026#39; width=\u0026#39;100%\u0026#39;\roverrides={{\rButton31502513: { onClick: () =\u0026gt; setShowCreateModal(true) },\rButton31502517: {\ronClick: async () =\u0026gt; {\r+ await DataStore.clear()\rsignOut()\r}\r}\r}}\r/\u0026gt; Bây giờ chúng tôi có các quy tắc ủy quyền trong ứng dụng của mình.\n"
},
{
	"uri": "/vi/11-add-a-uitheme/",
	"title": "Thêm chủ đề giao diện người dùng vào Dự án của bạn",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn Trước tiên, hãy cài đặt Plugin AWS Amplify Theme Editor . Sau đó, chuyển đến tệp Figma của dự án của bạn. Nhấp vào biểu tượng Figma trong thanh điều hướng, sau đó nhấp vào plugin, sau đó nhấp vào AWS Amplify Theme Editor. Bạn sẽ thấy một giao diện để thay đổi chủ đề của ứng dụng. Chọn bất kỳ màu nào bạn thích, sau đó cuộn xuống dưới cùng và nhấp vào Cập nhật chủ đề Bạn sẽ thấy tất cả các thành phần của mình trong tab Thành phần của tôi cập nhật để phù hợp với chủ đề màu. Bạn cũng có thể làm điều này với khoảng cách, kích thước phông chữ và các thành phần riêng lẻ. Để đồng bộ hóa cục bộ các thay đổi của bạn, hãy chạy amplify pulltừ dòng lệnh trong dự án của bạn. Chúng ta sẽ cần chuyển chủ đề màu cho thành phần trong index.js tệp. Nhập đối tượng chủ đề: import { studioTheme } from \u0026#39;./ui-components\u0026#39; Sau đó, thêm nó làm chỗ dựa cho AmplifyProvider: \u0026lt;AmplifyProvider theme={studioTheme}\u0026gt; Bây giờ chủ đề màu của bạn sẽ khớp với chủ đề bạn đã thiết lập trong Figma! Giờ đây, bạn có thể cập nhật các chủ đề và thành phần trong Figma và đồng bộ hóa chúng với ứng dụng cục bộ của mình.\n"
},
{
	"uri": "/vi/12-frontend-hosting/",
	"title": "Dịch vụ lưu trữ Giao diện người dùng ứng dụng AWS Amplify và React đầu tiên của bạn",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn Trước tiên, hãy tạo kho lưu trữ GitHub cho ứng dụng của bạn.\nChuyển đến trang repo mới và thêm tên. Sau đó nhấp vào Tạo kho lưu trữ. Đẩy mã của bạn lên GitHub. git add .\rgit commit -m \u0026#34;Amplify Studio tutorial\u0026#34;\rgit remote add origin YOUR_REPO_URL\rgit push -u origin main 3. Chuyển đến Bảng điều khiển AWS Amplify . Chọn ứng dụng Khuếch đại mà bạn đang xây dựng, sau đó nhấp vào ứng dụng đó. Chuyển sang Hosting environmentstab, chọn GitHub, sau đó nhấp vào Kết nối nhánh. 4. Cấp quyền cho GitHub khi bạn được nhắc. 5. Sau đó trong danh sách thả xuống, hãy chọn kho lưu trữ của bạn. Cũng chọn chi nhánh bạn muốn triển khai. Sau đó, nhấp vào \u0026ldquo;Tiếp theo\u0026rdquo; 6. chọn môi trường phụ trợ \u0026ldquo;dàn dựng\u0026rdquo;. Nhấn Tạo vai trò mới. 7. Nhấn tiếp theo từng màn hình. 8. Nhấn Tạo vai trò 9. Sau đó quay lại trang Lưu trữ của Amplify và chọn vai trò của bạn Bấm tiếp. 10. Nhấp vào Lưu và triển khai. 11. Sau một vài phút, bạn sẽ thấy hộp kiểm cho biết ứng dụng của bạn đã được triển khai! 12. Bạn có thể nhấp vào URL để xem hoặc chia sẻ ứng dụng của mình.Từ đây, bạn có thể thêm miền tùy chỉnh, thiết lập xem trước yêu cầu kéo và kiểm soát truy cập. Giờ đây, cả giao diện người dùng và chương trình phụ trợ ứng dụng của bạn đều được triển khai lên AWS.\n"
},
{
	"uri": "/vi/13-resource-deletion/",
	"title": "Xóa tài nguyên ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bây giờ logic phụ trợ của chúng tôi đã hoàn tất và được triển khai, chúng tôi cần thêm dịch vụ lưu trữ giao diện người dùng vào ứng dụng của mình.\nHướng dẫn Hướng dẫn Trước tiên, hãy tạo kho lưu trữ GitHub cho ứng dụng của bạn. trang định giá .\nHướng dẫn Bạn có thể xóa tài nguyên Khuếch đại theo hai cách. Đầu tiên là bằng cách chạy amplify deletetrong thư mục của dự án từ CLI của bạn.\nCách khác là đi tới Bảng điều khiển khuếch đại , chọn ứng dụng của bạn, sau đó trong menu thả xuống Hành động, chọn Xóa ứng dụng.\nXóa ứng dụng Amplify theo bất kỳ cách nào cũng sẽ xóa tài nguyên AWS khỏi tài khoản của bạn.\n"
},
{
	"uri": "/vi/14-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Kết luận Bạn hiện đã xây dựng một ứng dụng hoàn chỉnh với xác thực, ủy quyền, dữ liệu và giao diện người dùng React được xây dựng bằng AWS Amplify Studio.\nBước tiếp theo Để kiểm tra kỹ năng của bạn và tiếp tục học Amplify, bạn có thể thêm nhiều tính năng hơn vào ứng dụng này, ví dụ:\nThêm hình ảnh vào ghi chú của bạn. Kích hoạt lưu trữ qua Amplify Studio, sau đó sử dụng Thư viện Amplify JS để truy cập hình ảnh trong ứng dụng của bạn. Biến ứng dụng của bạn thành ứng dụng Next.js, sau đó di chuyển một số logic phụ trợ của bạn sang phía máy chủ . Viết quy tắc logic và ủy quyền để có thể chia sẻ ghi chú giữa những người dùng (ví dụ: bạn có thể chia sẻ danh sách việc cần làm với người quan trọng của mình). "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]