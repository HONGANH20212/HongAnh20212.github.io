[
{
	"uri": "/1-create-a-data-model/",
	"title": "Create data model",
	"tags": [],
	"description": "",
	"content": "In this lesson, you will start the AWS Amplify Studio application and create a data model.\nInstruct The first thing we need to do for our note-taking app is to create data models. We will want to store our notes in a database so that users can access them on different devices.\nIf you don\u0026rsquo;t have an AWS account, go ahead and create one. You also may want to read about AWS Amplify pricing and how to set a billing alarm.\nGo to the AWS Amplify Console. Continue to Start in Amplify Studio. Enter Application Name: notes . Select Confirm Development. When development app is selected Launch studio.\nSelect Data and Setup on the left navigation Data models allow us to organize and normalize data - in JavaScript it would be very difficult to do with an array of objects where each object has different keywords. Instead, we want to normalize our data so that each version has the same properties. We also want the data types to be normalized. For example, if you are going to create a data model for items in an online store, you will have the item name and description you want as strings. You will also have the price, float and image, which will be a URL. Normalizing your data in this way will make your interaction much easier.\nIn Studio, create a named Notes data model and add two fields, title and text. Preserve the String data type. Once you\u0026rsquo;ve done this, click Save and deploy - your data will simply be mined to AWS! AWS Amplify Data Storage When you create a data model with AWS Amplify Studio, you are using the DataStore. DataStore stores your data both online and offline without any extra work. In the browser, it stores data in IndexedDB similar to localStorage. It will also save your data to the cloud using an Amazon DynamoDB database.\n"
},
{
	"uri": "/",
	"title": "Full Stack for Front-End Developers: Build your first AWS Amplify and React App intro",
	"tags": [],
	"description": "",
	"content": "Full Stack for Front-End Developers: Build your first AWS Amplify and React App intro In this course, you will learn how to build fullstack applications with AWS Amplify Studio. We\u0026rsquo;ll build a note-taking app with authentication, authorization, and data. We\u0026rsquo;ll also be using Amplify Studio\u0026rsquo;s Figma to generate code that encourages a straight transition from design to React components.\nIf you are a front end developer looking to build fullstack apps, then you are at the right place!\nDecision condition Knowledge of React, including states, event handlers, and props. How to use the command line interface on your computer. You don\u0026rsquo;t have to be an expert though! Although this course is not completely required, you may want to learn about Figma before building your own applications with AWS Amplify Studio. Things you will build We will build a note taking app with the following features: All notes are listed on the homepage Ability to create, update and delete notes User accounts have the ability to login, create accounts and log out Users can only view and modify their own notes "
},
{
	"uri": "/2-use-the-awsamplify/",
	"title": "Use the AWS Amplify Data Manager to Seed Data",
	"tags": [],
	"description": "",
	"content": "In this lesson, We will automatically generate the original data in AWS Amplify data manager..\nInstruct Go to the Content tab in Amplify Studio. In the Content page select Actions and select Auto generate data. Here you will be able to modify your application data. I will create 100 rows of data and add some constraints. I want my title to be 1-3 words long. I want each of my text fields to be 1-5 sentences long. Then I will click Generate Data. You should now see 100 rows of data in the Amplify data manager. You can access and edit any rows of data, create new notes, or delete them using the data manager. "
},
{
	"uri": "/3-import-figma-designs/",
	"title": "Import Figma Designs into Amplify Studio",
	"tags": [],
	"description": "",
	"content": "In this lesson, we\u0026rsquo;ll use AWS Amplify Studio to convert designs from the popular design tool Figma to React components.\nInstruct Go to UI Library in Studio. Select Sync with Figma. For this course, I pre-created a remixed Figma file from the original Amplify UI Kit for your use. has the necessary components for the note taking application. Click get a copy on Figma to use it. You\u0026rsquo;ll be prompted to create a Figma account if you don\u0026rsquo;t already have one \u0026ndash; this project is on their free tier.\nSelect My Components you will see your UI components in Amplify Studio Copy the link to your Figma file and return to Amplify Studio. Paste your link into the input, then click Continue. Amplify Studio allows you to take these components and export them to human-readable React code - we\u0026rsquo;ll do this in a few lessons!\n"
},
{
	"uri": "/4-connect-data/",
	"title": "Connect Data Models to UI Components",
	"tags": [],
	"description": "",
	"content": "In this lesson, we will link data generated by AWS Amplify to the UI Component.\nInstruct Go to UI Library in Studio. Select NoteUI then enter Configure Click on the title on the existing card that says T-Shirt. On the right side of the page, Select Set Text Label. We\u0026rsquo;ll want to make this the title of the note. Set the label holder: note.title. You should see the t-shirt text change to one of the titles of one of the generated notes. If you click Shuffle Preview Data you will cycle through different notes! Do the same for the note text - select the paragraph below the title. Set the label to note.title. Click on the trash can icon. Set onClick holder to Delete under data. Then select Note model and set ID to note.id Create a form Back to UI Library. Click on the CreateNote form, then select Configure. Click Save and add Prop: `onClick. Action: Create new. Model: Note. Then select title input to fill in the title model field and the like for the text. The name TextField comes from Figma - you can rename the elements within it! Update form Back to UI Library. Click UpdateNote , then select Configure. Click Save and add as shown below. We have now linked the data we created in Amplify Studio with the UI components we created in Figma. "
},
{
	"uri": "/5-create-a-collection-view/",
	"title": "Create a collection view",
	"tags": [],
	"description": "",
	"content": "In this article we will create a gallery to display all the notes in our application.\nInstruct Go to UI Library in Studio. Select NoteUI then enter Configure Then select Create Collection. Then change the gallery style to grid and set the number of columns 3 and set the page size 9 which will eventually add 10px to each side of the note. You can set the sort or filter conditions for your collection on the right side.\n"
},
{
	"uri": "/6-setup-a-local-aws/",
	"title": "Setup a Local AWS Amplify Application",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s time to develop apps locally in code! We will create a React application and set up AWS Amplify for the project.\nInstruct Create a React Application First, create a React app using your command line interface. We will use Create React App (https://create-react-app.dev/) to create a boilerplate React app.\nRun npx create-react-app notes. Then change to the created directory, cd notes.\nRun Amplify Pull We will install the AWS Amplify CLI: npm install -g @aws-amplify/cli. Return to Amplify Studio and click Local Setup Guide. Here you will receive an amplify pull command for your application - the application ID will be specific to your application. Copy this command by clicking on it, then run the command in your CLI. A screen will appear asking if you want to log in to the Amplify CLI in your browser, select Yes and then you will be asked questions about your application in the CLI. Press enter to answer each default question. Open the application code in your text editor. You will notice that a few folders have been created in Amplify Studio. Amplify Configure Install Amplify libraries and React components. npm i aws-amplify @aws-amplify/ui-react\nOnce installed, open /src/index.js file and add the following above the React native code.\n// src/index.js\rimport { Amplify } from \u0026#39;aws-amplify\u0026#39;\rimport config from \u0026#39;./aws-exports\u0026#39;\rAmplify.configure(config) Set Up Amplify UI We have some setup steps to follow in order for the components to render as expected.\nImport the component and the Amplify CSS file.\n// src/index.js\rimport { AmplifyProvider } from \u0026#39;@aws-amplify/ui-react\u0026#39;\rimport \u0026#39;@aws-amplify/ui-react/styles.css\u0026#39; Then set the AmplifyProvider component as the top-level component for your application according to the existing root.render method:\n// src/index.js\rroot.render(\r+ \u0026lt;AmplifyProvider\u0026gt;\r\u0026lt;App /\u0026gt;\r+ \u0026lt;/AmplifyProvider\u0026gt;\r) Finally, add the Inter font file to **src/index.**css:\n/* src/index.css */\r@import url(\u0026#39;https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900\u0026amp;display=swap\u0026#39;); We\u0026rsquo;ve set up a React app linked to the AWS Amplify backend and configured Amplify\u0026rsquo;s UI components.\n"
},
{
	"uri": "/7-using-aws-amplify/",
	"title": "Using AWS Amplify Studio Components Locally",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s show the React components created by Amplify Studio in our app.\nInstruct Run the Create React application development server through the CLI: npm run start. Keep this app running in the background so you can see its changes in the browser. Go to /src/App.js and remove the return replace boilerplate with React Fragment: function App() {\rreturn (\r\u0026lt;\u0026gt;\u0026lt;/\u0026gt;\r)\r} You can also delete existing entries.\nAdd NavBar component to the application.\nimport { NavBar } from \u0026#39;./ui-components\u0026#39; Then create a component instance in return\nfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar /\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} When you view the NavBar in the browser you will notice that it doesn\u0026rsquo;t span the entire page add the width=100% prop to the element:\n\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt; Now render the collection of notes below the title:\nimport { NavBar, NoteUICollection} from \u0026#39;./ui-components\u0026#39;\rfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt;\r\u0026lt;NoteUICollection /\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} You will notice that the NavBar is really close to the notes, add a bottom margin.\n\u0026lt;NavBar width=\u0026#34;100%\u0026#34; marginBottom=\u0026#39;20px\u0026#39; /\u0026gt; Add at the end of your index.css file. This will be helpful to make our composition look even better!\n/* Add to the end of /src/index.css */\r.modal {\rposition: absolute;\rbackground-color: white;\rmargin-left: auto;\rmargin-right: auto;\rwidth: fit-content;\rleft: 0;\rright: 0;\rtop: 100px;\rborder: .5px solid gray;\r}\r.container {\rmargin: 0 auto;\rmax-width: 900px;\r} Wrap NoteUICollectiondiv with a class container so that they are displayed in the center of the page:\nfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt;\r\u0026lt;div className=\u0026#39;container\u0026#39;\u0026gt;\r\u0026lt;NoteUICollection /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} You can check the CreateNote form (when it\u0026rsquo;s not hidden) and it will add a new note to your UI!\nimport { CreateNote, NavBar, NoteUICollection, UpdateNote } from \u0026#39;./ui-components\u0026#39;\rfunction App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;NavBar width=\u0026#34;100%\u0026#34; /\u0026gt;\r\u0026lt;div className=\u0026#39;container\u0026#39;\u0026gt;\r\u0026lt;NoteUICollection /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div className=\u0026#39;modal\u0026#39; style={{display: \u0026#39;none\u0026#39;}}\u0026gt;\r\u0026lt;CreateNote /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div className=\u0026#39;modal\u0026#39; style={{display: \u0026#39;none\u0026#39;}}\u0026gt;\r\u0026lt;UpdateNote /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/\u0026gt;\r)\r} We have now created the basic user interface for our application.\n"
},
{
	"uri": "/8-modify-aws-amplify/",
	"title": "Modify AWS Amplify Studio Generated Components in Code",
	"tags": [],
	"description": "",
	"content": "AWS Amplify Studio has many code generation capabilities that speed up development time; however, it\u0026rsquo;s built for developers so it\u0026rsquo;s important to be able to override all generated code. We will use overrides to extend the functionality of the components.\nInstruct First, we will create state fields to know if each modal is displayed or not. We\u0026rsquo;ll also create a status field to store which notes should be updated.\nimport { useState } from \u0026#39;react\u0026#39;\rfunction App() {\rconst [showCreateModal, setShowCreateModal] = useState(false)\rconst [showUpdateModal, setShowUpdateModal] = useState(false)\rconst [updateNote, setUpdateNote] = useState()\r... Open the /src/ui-components/NavBar.js file. You will notice a Button child component with getOverrideProps inside it. The second argument getOverrideProps is the Figma key, in this case Button31632483 is .\nYou can pass the overrides prop to instances of your component, which will contain an object. Key will be the key of subcomponent, value will be the property we want to override. We will add an onClick button that toggles showCreateModal to true.\n\u0026lt;NavBar\rmarginBottom=\u0026#39;20px\u0026#39; width=\u0026#39;100%\u0026#39;\roverrides={{\rButton31502513: { onClick: () =\u0026gt; setShowCreateModal(true) }\r}}\r/\u0026gt; Now we will conditionally expose the CreateNote method to show only when showCreateModal is true. We will also override the X symbol to close the modal. For accessibility, I would also make it a button.\n\u0026lt;div className=\u0026#39;modal\u0026#39; style={{ display: showCreateModal === false \u0026amp;\u0026amp; \u0026#39;none\u0026#39; }}\u0026gt;\r\u0026lt;CreateNote overrides={{\rMyIcon: {\ras: \u0026#39;button\u0026#39;,\ronClick: () =\u0026gt; setShowCreateModal(false)\r}\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt; Clicking the edit button on the note will show the update method and also set the version of the note we want to update/\n\u0026lt;NoteUICollection overrideItems={({ item, idx }) =\u0026gt; {\rreturn {\roverrides: {\rVector31472464: {\ras: \u0026#39;button\u0026#39;,\ronClick: () =\u0026gt; {\rsetShowUpdateModal(true)\rsetUpdateNote(item)\r}\r}\r}\r}\r}}\r/\u0026gt; Add an override to UpdateNote to hide the update method when it closes and we will also pass the version of the note that we want to update.\n\u0026lt;div className=\u0026#39;modal\u0026#39; style={{ display: showUpdateModal === false \u0026amp;\u0026amp; \u0026#39;none\u0026#39; }}\u0026gt;\r\u0026lt;UpdateNote\rnote={updateNote} overrides={{\rMyIcon: {\ras: \u0026#39;button\u0026#39;,\ronClick: () =\u0026gt; setShowUpdateModal(false)\r}\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt; Now our full UI is working as expected. You can use overrides to customize user interface elements created by AWS Amplify Studio in your own code.\n"
},
{
	"uri": "/9-add-authentication/",
	"title": "Add Authentication to your Application",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ll be adding authentication to our app so users can be created, logged in, and signed out.\nWe\u0026rsquo;ll be adding both authorization and authentication to this app - let\u0026rsquo;s quickly define both:\nAuthorization - Allows users to have different actions they can take, e.g. only admins can update blog posts or only data creators can viewable.\nAuthentication - Make sure someone is what they say, such as by asking them to enter a password.\nInstruct Click Authentication in Setup. You can configure different login mechanisms, properties, password protection, and more. using the form provided. Select the default configuration, then click Deploy. After your deployment is done, run amplify pull in your CLI to synchronize the changes with your local application.\nIn the App.js component, we will use the WithAuthenticator function to require the user to login to view the page. It will also implement the user creation process.\nFirst, import the ingredients:\nimport { withAuthenticator } from \u0026#39;@aws-amplify/ui-react\u0026#39; Then on your output line, wrap the Application component in a function:\nexport default withAuthenticator(App) If you return to your app, you\u0026rsquo;ll need to sign in to view your page.\nImplement the logout button! The withAuthenticator function passes a signOut function (and user information) to the component it wraps as a prop. Let\u0026rsquo;s destroy it: function App ({ signOut }) {\nIn the NavBar component that runs the function when the Sign Out button is clicked.\n\u0026lt;NavBar\rmarginBottom=\u0026#39;20px\u0026#39; width=\u0026#39;100%\u0026#39;\roverrides={{\rButton31502513: { onClick: () =\u0026gt; setShowCreateModal(true) },\rButton31502517: {\ronClick: async() =\u0026gt; {\rsignOut()\r}\r}\r}}\r/\u0026gt; We now have a full authentication flow for our application.\n"
},
{
	"uri": "/10-add-owner-based/",
	"title": "Add owner-based authorization rule",
	"tags": [],
	"description": "",
	"content": "In the notes app, users can only view and modify their own notes. We will add authorization rules to our data model so that the data is protected and can only be accessed by the owner of the data.\nInstruct In AWS Amplify Studio, go to the data tab under Setup. Then click the Note model. Enable Enable Owner Authorization. Select all activities. Delete an existing rule. Then click Save and Deploy. Once your data updates are deployed, run amplify pull in your CLI to sync your changes locally. Import the DataStore library: import { DataStore } from \u0026#39;aws-amplify\u0026#39; In the NavBar component, add the following line of code to clear local data before logging out. \u0026lt;NavBar\rmarginBottom=\u0026#39;20px\u0026#39; width=\u0026#39;100%\u0026#39;\roverrides={{\rButton31502513: { onClick: () =\u0026gt; setShowCreateModal(true) },\rButton31502517: {\ronClick: async() =\u0026gt; {\r+ await DataStore.clear()\rsignOut()\r}\r}\r}}\r/\u0026gt; We now have authorization rules in our application. "
},
{
	"uri": "/11-add-a-uitheme/",
	"title": "Add UI Themes to your Project",
	"tags": [],
	"description": "",
	"content": "Instruct First, install the AWS Amplify Theme Editor Plugin. Then go to your project\u0026rsquo;s Figma file. Click the Figma icon in the navigation bar, then plugins, then click AWS Amplify Theme Editor. You will see an interface to change the theme of the application. Choose any color you like, then scroll to the bottom and click Update Theme You\u0026rsquo;ll see all your components in the My Components tab updated to match the color theme. You can also do this with spacing, font size, and individual elements. To sync your changes locally, run amplify pull from the command line in your project. We will need to pass the color theme to the element in the index.js file. Enter subject object: import { studioTheme } from \u0026#39;./ui-components\u0026#39; Then add it as a prop for AmplifyProvider: \u0026lt;AmplifyProvider theme={studioTheme}\u0026gt; Your color theme should now match the one you set up in Figma! You can now update themes and components in Figma and synchronize them with your local application. "
},
{
	"uri": "/12-frontend-hosting/",
	"title": "Hosting Your First AWS Amplify and React App UI",
	"tags": [],
	"description": "",
	"content": "Instruct First, create a GitHub repository for your app.\nGo to the new repo page and add a name. Then click Create Repository. Push your code to GitHub. ```\ngit add .\rgit commit -m \u0026quot;Amplify Studio tutorial\u0026quot;\rgit remote add origin YOUR_REPO_URL\rgit push -u origin main\r```\rGo to AWS Amplify Console . Select the Amplifier app you\u0026rsquo;re building, then click it. Switch to Hosting environmentstab, select GitHub, then click Connect Branch. Give GitHub permission when you are prompted. Then in the drop-down list select your repository. Also select the branch you want to deploy to. Then click \u0026ldquo;Next\u0026rdquo; select the \u0026ldquo;staging\u0026rdquo; backend environment. Click Create New Role. Next tap each screen. Click Create Role Then return to Amplify\u0026rsquo;s Archive page and select your role Click Next. Click Save and Deploy. After a few minutes, you should see a checkbox that says your app is deployed! You can click the URL to view or share your app. From here you can add a custom domain, set up pull request previews, and control access. Now, both your application frontend and backend are deployed to AWS.\n"
},
{
	"uri": "/13-resource-deletion/",
	"title": "Resources Delete ",
	"tags": [],
	"description": "",
	"content": "Now that our backend logic is complete and deployed, we need to add a front end hosting service to our application.\nInstruct Instruct First, create a GitHub repository for your app. pricing page .\nInstruct You can delete an Amplifier resource in two ways. The first is by running amplify delete in the project\u0026rsquo;s directory from your CLI.\nThe alternative is to go to Amplify Console , select your app, then in the Actions dropdown menu , select Delete App.\nDeleting the Amplify app in any way will remove AWS resources from your account.\n"
},
{
	"uri": "/14-conclusion/",
	"title": "Conclusion",
	"tags": [],
	"description": "",
	"content": "Conclude You\u0026rsquo;ve now built a complete app with authentication, authorization, data, and a React UI built using AWS Amplify Studio.\nNext step To test your skills and keep learning Amplify, you can add more features to this app, for example:\nAdd images to your notes. Enable storage via Amplify Studio, then use Amplify JS Library to access the images in your application. Turn your app into a Next.js app, then move some of your backend logic to the side. server . Write logic and authorization rules so that notes can be shared between users (for example, you can share a to-do list with your significant other). "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]